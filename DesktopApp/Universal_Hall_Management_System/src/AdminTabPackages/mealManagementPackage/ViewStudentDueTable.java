/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AdminTabPackages.mealManagementPackage;

import BasicPackages.MealData;
import BasicPackages.Student;
import PdfCreation.PdfTableWriter;
import QueryPackage.BasicQuery;
import QueryPackage.ViewDueTableQuery;
import com.itextpdf.text.DocumentException;
import java.io.FileNotFoundException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Tahmid
 */
public class ViewStudentDueTable extends javax.swing.JFrame {

    /**
     * Creates new form ViewStudentDueTable
     */
    public ViewStudentDueTable() {
        super("Student Due Information");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        deptTextField = new javax.swing.JTextField();
        sessionTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoTable = new javax.swing.JTable();
        viewButton = new javax.swing.JButton();
        logLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        viewAllDateCheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        regNoTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        startYearChooser = new com.toedter.calendar.JYearChooser();
        startMonthChooser = new com.toedter.calendar.JMonthChooser();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        endYearChooser = new com.toedter.calendar.JYearChooser();
        endMonthChooser = new com.toedter.calendar.JMonthChooser();
        printButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Department :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Session :");

        deptTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        sessionTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        sessionTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sessionTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sessionTextFieldKeyTyped(evt);
            }
        });

        infoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Department", "Session", "Total Meal", "Total_Due", "Year/ Month"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(infoTable);
        if (infoTable.getColumnModel().getColumnCount() > 0) {
            infoTable.getColumnModel().getColumn(6).setResizable(false);
        }

        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        logLabel.setText("log Label");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 8)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Leave Field Empty If You Want To View All Data");

        viewAllDateCheckBox.setText("Check It To View All Date");
        viewAllDateCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                viewAllDateCheckBoxStateChanged(evt);
            }
        });
        viewAllDateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllDateCheckBoxActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Registration No :");

        regNoTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        regNoTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        regNoTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                regNoTextFieldKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel7.setText("Leave this field empty to show all student data");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel17.setText("Start Year : ");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel18.setText("Month : ");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel19.setText("End Year: ");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel20.setText("Month : ");

        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(157, 157, 157))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(regNoTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(deptTextField)
                    .addComponent(sessionTextField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(40, 40, 40))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(viewAllDateCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(startMonthChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(startYearChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(endYearChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .addComponent(endMonthChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(40, 40, 40))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 29, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(311, 311, 311))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(27, 27, 27)))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewAllDateCheckBox)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(startYearChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                    .addComponent(endYearChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(endMonthChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startMonthChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regNoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deptTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sessionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewButton)
                .addGap(19, 19, 19)
                .addComponent(logLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(printButton)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("All Student Data", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sessionTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sessionTextFieldKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if (key < '0' || key > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_sessionTextFieldKeyTyped

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        viewButtonPressed();
    }//GEN-LAST:event_viewButtonActionPerformed
    public void viewButtonPressed() {
        String regNo = regNoTextField.getText().trim();
        try {
            // TODO add your handling code here:
            if (regNoTextField.getText().trim().isEmpty() == false) {
                Student st = BasicQuery.findStudent(regNo);
                if (st == null) {
                    JOptionPane.showMessageDialog(this, "Sorry, no student found with this registration number.");
                    deptTextField.setText("");
                    sessionTextField.setText("");
                } else {
                    deptTextField.setText(st.getStudent_dept());
                    sessionTextField.setText(st.getStudent_session() + "");
                    viewDataForAStudent(st.getId());
                }
            } else if (sessionTextField.getText().trim().isEmpty() && deptTextField.getText().trim().isEmpty()) {
                viewAllData();
            } else if (sessionTextField.getText().trim().isEmpty() == false && deptTextField.getText().trim().isEmpty()) {
                int session = Integer.parseInt(sessionTextField.getText().trim());
                viewDataWithASession(session);
            } else if (sessionTextField.getText().trim().isEmpty() && deptTextField.getText().trim().isEmpty() == false) {
                String dept = deptTextField.getText().trim();
                viewDataWithADepartment(dept);
            } else if (sessionTextField.getText().trim().isEmpty() == false && deptTextField.getText().trim().isEmpty() == false) {
                String dept = deptTextField.getText().trim();
                int session = Integer.parseInt(sessionTextField.getText().trim());
                viewDataWithADepartmentAndSession(dept, session);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ShowStudentsMealData.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ShowStudentsMealData.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void viewAllData() throws ClassNotFoundException, SQLException {
        if (viewAllDateCheckBox.isSelected() == false) {
            int startMonth = startMonthChooser.getMonth();
            int startYear = startYearChooser.getYear();
            int endMonth = endMonthChooser.getMonth();
            int endYear = endYearChooser.getYear();

            readayTable(ViewDueTableQuery.getMealDueResultSet(startYear, startMonth, endYear, endMonth));

        } else {
            readayTable(ViewDueTableQuery.getMealDueResultSet());
        }
    }

    public void viewDataWithASession(int session) throws SQLException, ClassNotFoundException {
        if (viewAllDateCheckBox.isSelected() == false) {
            int startMonth = startMonthChooser.getMonth();
            int startYear = startYearChooser.getYear();
            int endMonth = endMonthChooser.getMonth();
            int endYear = endYearChooser.getYear();

            readayTable(ViewDueTableQuery.getMealDueResultSetForASession(startYear, startMonth, endYear, endMonth, session));

        } else {
            readayTable(ViewDueTableQuery.getMealDueResultSetForASession(session));
        }
    }

    public void viewDataWithADepartment(String dept) throws SQLException, ClassNotFoundException {
        if (viewAllDateCheckBox.isSelected() == false) {
            int startMonth = startMonthChooser.getMonth();
            int startYear = startYearChooser.getYear();
            int endMonth = endMonthChooser.getMonth();
            int endYear = endYearChooser.getYear();

            readayTable(ViewDueTableQuery.getMealDueResultSetForADepartment(startYear, startMonth, endYear, endMonth, dept));

        } else {
            readayTable(ViewDueTableQuery.getMealDueResultSetForADepartment(dept));
        }
    }

    public void viewDataWithADepartmentAndSession(String dept, int session) throws SQLException, ClassNotFoundException {
        if (viewAllDateCheckBox.isSelected() == false) {
            int startMonth = startMonthChooser.getMonth();
            int startYear = startYearChooser.getYear();
            int endMonth = endMonthChooser.getMonth();
            int endYear = endYearChooser.getYear();
            readayTable(ViewDueTableQuery.getMealDueResultSetForADepartmentAndSession(startYear, startMonth, endYear, endMonth, dept, session));
        } else {
            ViewDueTableQuery.getMealDueResultSetForADepartmentAndSession(dept, session);
        }
    }

    public void viewDataForAStudent(int id) throws SQLException, ClassNotFoundException {
        if (viewAllDateCheckBox.isSelected() == false) {
            int startMonth = startMonthChooser.getMonth();
            int startYear = startYearChooser.getYear();
            int endMonth = endMonthChooser.getMonth();
            int endYear = endYearChooser.getYear();
            readayTable(ViewDueTableQuery.getMealDueResultSetForAStudent(startYear, startMonth, endYear, endMonth, id));
        } else {
            readayTable(ViewDueTableQuery.getMealDueResultSetForAStudent(id));
        }
    }

    public void readayTable(ResultSet resultSet) throws SQLException {
        DefaultTableModel model = (DefaultTableModel) infoTable.getModel();
        model.setRowCount(0);
        while (resultSet.next()) {
            model.addRow(new Object[]{resultSet.getObject(1), resultSet.getObject(2), resultSet.getObject(3), resultSet.getObject(4),
                resultSet.getObject(5), resultSet.getObject(6), resultSet.getObject(7)});
        }
        return;
    }


    private void viewAllDateCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_viewAllDateCheckBoxStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_viewAllDateCheckBoxStateChanged

    private void viewAllDateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllDateCheckBoxActionPerformed
        // TODO add your handling code here:
        if (viewAllDateCheckBox.isSelected()) {
            endYearChooser.setEnabled(false);
            endMonthChooser.setEnabled(false);
            startMonthChooser.setEnabled(false);
            startYearChooser.setEnabled(false);
        } else {
            endYearChooser.setEnabled(true);
            endMonthChooser.setEnabled(true);
            startMonthChooser.setEnabled(true);
            startYearChooser.setEnabled(true);
        }
    }//GEN-LAST:event_viewAllDateCheckBoxActionPerformed

    private void regNoTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_regNoTextFieldKeyTyped
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if (key < '0' || key > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_regNoTextFieldKeyTyped

    public String timeString() {
        if (viewAllDateCheckBox.isSelected() == true) {
            return "";
        } else {
            String[] str = {"January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December"};
            return "From " + str[startMonthChooser.getMonth()]+" "+startYearChooser.getYear()
                    +" to " + str[endMonthChooser.getMonth()]+" "+endYearChooser.getYear();
        }
    }

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            new PdfTableWriter("Student Due Data", infoTable, "Student due data. " + timeString(), "The table was generated by uhms.");
        } catch (DocumentException ex) {
            Logger.getLogger(GenerateDueTableOfAMonth.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GenerateDueTableOfAMonth.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_printButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField deptTextField;
    private com.toedter.calendar.JMonthChooser endMonthChooser;
    private com.toedter.calendar.JYearChooser endYearChooser;
    private javax.swing.JTable infoTable;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel logLabel;
    private javax.swing.JButton printButton;
    private javax.swing.JTextField regNoTextField;
    private javax.swing.JTextField sessionTextField;
    private com.toedter.calendar.JMonthChooser startMonthChooser;
    private com.toedter.calendar.JYearChooser startYearChooser;
    private javax.swing.JCheckBox viewAllDateCheckBox;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
