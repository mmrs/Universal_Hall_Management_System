/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AdminTabPackages;

import AdminTabPackages.studentManagementPackage.AddSingleStudentFrame;
import AdminTabPackages.studentManagementPackage.CurrentSeatInformation;
import AdminTabPackages.studentManagementPackage.RemoveCompleteSession;
import AdminTabPackages.studentManagementPackage.RemoveSingleStudent;
import AdminTabPackages.studentManagementPackage.StudentInfo;
import AdminTabPackages.studentManagementPackage.ViewStudentWhoGotSeat;
import BasicPackages.Room;
import BasicPackages.Student;
import QueryPackage.BasicQuery;
import dbconnection.CreateConnection;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.lang.reflect.Array;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Tahmid
 */
public class StudentManagementPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentManagementPanel
     */
    public StudentManagementPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addStudentFromDatabaseButton = new javax.swing.JButton();
        addSingleStudentButton = new javax.swing.JButton();
        removeSingleStudentButton = new javax.swing.JButton();
        removeStudentCompletSeason = new javax.swing.JButton();
        viewStudentInformation = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        addStudentFromDatabaseButton.setText("Add Students From Student Database");
        addStudentFromDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentFromDatabaseButtonActionPerformed(evt);
            }
        });

        addSingleStudentButton.setText("Add Single Student");
        addSingleStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSingleStudentButtonActionPerformed(evt);
            }
        });

        removeSingleStudentButton.setText("Remove Single Student");
        removeSingleStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSingleStudentButtonActionPerformed(evt);
            }
        });

        removeStudentCompletSeason.setText("Remove Student (Complete Season)");
        removeStudentCompletSeason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeStudentCompletSeasonActionPerformed(evt);
            }
        });

        viewStudentInformation.setText("Current Seat Information");
        viewStudentInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewStudentInformationActionPerformed(evt);
            }
        });

        jButton1.setText("View Student Information");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(215, 215, 215)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(addStudentFromDatabaseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeStudentCompletSeason, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeSingleStudentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addSingleStudentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewStudentInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(194, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewStudentInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addStudentFromDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addSingleStudentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removeSingleStudentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removeStudentCompletSeason, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(103, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addStudentFromDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentFromDatabaseButtonActionPerformed
        try {

            ResultSet reuslt = BasicQuery.getUnallocatedStudentResultSet();
            ArrayList<Student> studentList = getStudentArrayList(reuslt);
            if (studentList.size() == 0) {
                JOptionPane.showMessageDialog(this, "There is no student who dose not has a seat in this hall");
                return;
            }
            ArrayList<Room> room_list = getCurrentRoomInfoArrarList();
            ArrayList<Student> studentsGotRoom = allocateSeatsToStudents(studentList, room_list);
            //executeAllocationQuery(studentsGotRoom);
            viewStudentWhoGotSeat(studentsGotRoom);

        } catch (SQLException ex) {
            Logger.getLogger(StudentManagementPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(StudentManagementPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addStudentFromDatabaseButtonActionPerformed

    public void viewStudentWhoGotSeat(ArrayList<Student> studentsGotRoom) {

        ViewStudentWhoGotSeat frame = new ViewStudentWhoGotSeat(studentsGotRoom);
        frame.setVisible(true);
        frame.setResizable(false);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dim.getWidth() - frame.getWidth()) / 2);
        int y = 100;
        frame.setLocation(x, y);
    }

    /**
     * returns a session wise sorted random student list from (param result)
     *
     * @param result result set contain the list of unallocated student
     * (id,name,dept,session)
     * @return
     * @throws SQLException
     */
    public ArrayList<Student> getStudentArrayList(ResultSet result) throws SQLException {
        ArrayList<Student> studentList = new ArrayList<>();
        while (result.next()) {
            Student student = new Student(result.getInt(1), result.getString("student_name"), result.getString("student_dept"), result.getInt("student_session"));
            studentList.add(student);
            System.out.println(student);
        }
        long seed = 15435l;
        seed = System.currentTimeMillis();
        Collections.shuffle(studentList, new Random((int) seed));
        Collections.sort(studentList, Student.studentSessionComparator);

        return studentList;
    }

    public ArrayList<Room> getCurrentRoomInfoArrarList() throws SQLException, ClassNotFoundException {
        String query = "SELECT * FROM current_rooms_info WHERE capacity>0";
        ResultSet result = CreateConnection.getResultFromDatabase(query);
        ArrayList<Room> roomList = new ArrayList<>();

        while (result.next()) {
            Room room = new Room(result.getInt("room_number"), result.getInt("capacity"));
            roomList.add(room);
            System.out.println(room);
        }
        return roomList;
    }

    public ArrayList<Student> allocateSeatsToStudents(ArrayList<Student> studentList, ArrayList<Room> roomList) throws ClassNotFoundException, SQLException {
        int totalFreeSeats = 0;
        int totalAllocated = 0;

        for (Room room : roomList) {
            totalFreeSeats += room.getCapacity();
        }
        ArrayList<Student> studentGotRoom = new ArrayList<>();
        int roomNumber = 0;
        for (Student student : studentList) {
            roomNumber = findOptimalSeatForStudent(student, roomList);
            if (roomNumber == 0) {
                continue;
            }
            totalFreeSeats--;
            totalAllocated++;
            student.setRoom_number(roomNumber);
            studentGotRoom.add(student);
            BasicQuery.allocateASeatToStudent(student);
        }

        if (totalFreeSeats > 0 && studentGotRoom.size() < studentList.size()) {
            for (Student student : studentList) {
                if (student.getRoom_number() > 0) {
                    continue;
                }
                roomNumber = findNonOptimalSeatForStudent(student, roomList);
                if (roomNumber == 0) {
                    continue;
                }
                totalFreeSeats--;
                totalAllocated++;
                student.setRoom_number(roomNumber);
                studentGotRoom.add(student);
                BasicQuery.allocateASeatToStudent(student);
                if (totalFreeSeats == 0) {
                    break;
                }
            }
        }

        for (Student student : studentList) {
            System.out.println(student);
        }
        return studentGotRoom;
    }

    public int findNonOptimalSeatForStudent(Student student, ArrayList<Room> roomList) {
        for (int i = 0; i < roomList.size(); i++) {
            Room room = roomList.get(i);
            if (room.getCapacity() > 0) {
                room.setCapacity(room.getCapacity() - 1);
                return room.getRoomNumber();
            }
        }
        return 0;
    }

    public int findOptimalSeatForStudent(Student student, ArrayList<Room> roomList) throws ClassNotFoundException, SQLException {
        Room room = null;

        for (int i = 0; i < roomList.size(); i++) {
            room = roomList.get(i);
            if (room.getCapacity() <= 0) {
                continue;
            }
            ArrayList<Student> roomStudent = studentListOfARomm(room.getRoomNumber());
            int sessionFlag = 1;
            int sameDeptFlag = 1;
            HashMap mp = new HashMap();
            mp.put(student.getStudent_dept(), 0);
            for (Student st : roomStudent) {
                if (Math.abs(st.getStudent_session() - student.getStudent_session()) > 1) {
                    sessionFlag = 0;
                }
                mp.put(st.getStudent_dept(), 0);
            }

            for (Student st : roomStudent) {
                mp.put(st.getStudent_dept(), (int) mp.get(st.getStudent_dept()) + 1);
            }

            for (Student st : roomStudent) {
                System.out.println(st.getStudent_name() + " " + (int) mp.get(st.getStudent_dept()));
            }

            if ((int) mp.get(student.getStudent_dept()) >= 2) {
                sameDeptFlag = 0;
            }
            System.out.println(sameDeptFlag + " " + sessionFlag);
            if (sameDeptFlag == 1 && sessionFlag == 1) {
                room.setCapacity(room.getCapacity() - 1);
                return room.getRoomNumber();
            }

        }

        return 0;
    }

    public ArrayList<Student> studentListOfARomm(int RoomNumber) throws ClassNotFoundException, SQLException {
        String query = "SELECT student_info.id , student_info.student_name, "
                + "student_info.student_dept,student_info.student_session from student_info INNER JOIN \n"
                + "allocated on allocated.id = student_info.id WHERE allocated.room_number = " + RoomNumber;
        ResultSet result = CreateConnection.getResultFromDatabase(query);

        ArrayList<Student> roomStudent = new ArrayList<>();

        while (result.next()) {
            Student student = new Student(result.getInt(1), result.getString("student_name"),
                    result.getString("student_dept"), result.getInt("student_session"));
            student.setRoom_number(RoomNumber);
            roomStudent.add(student);
            System.out.println(student);
        }
        return roomStudent;
    }


    private void addSingleStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSingleStudentButtonActionPerformed
        // TODO add your handling code here:

       AddSingleStudentFrame frame = new AddSingleStudentFrame();
        openFrame(frame);
    }//GEN-LAST:event_addSingleStudentButtonActionPerformed

    private void removeSingleStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSingleStudentButtonActionPerformed
        // TODO add your handling code here:
        RemoveSingleStudent frame = new RemoveSingleStudent();
        openFrame(frame);
    }//GEN-LAST:event_removeSingleStudentButtonActionPerformed

    private void removeStudentCompletSeasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeStudentCompletSeasonActionPerformed
        // TODO add your handling code here:
        RemoveCompleteSession frame = new RemoveCompleteSession();
         openFrame(frame);
    }//GEN-LAST:event_removeStudentCompletSeasonActionPerformed

    private void viewStudentInformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewStudentInformationActionPerformed
        try {
            // TODO add your handling code here:
            CurrentSeatInformation frame = new CurrentSeatInformation(BasicQuery.getCurrentSeatInformation());
               openFrame(frame);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(StudentManagementPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(StudentManagementPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewStudentInformationActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        StudentInfo info = new StudentInfo();
          info.setVisible(true);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dim.getWidth() - info.getWidth()) / 2);
        int y = 100;
        info.setLocation(x, y);
        
    }//GEN-LAST:event_jButton1ActionPerformed
    public void openFrame(JFrame frame) {
        frame.setVisible(true);
        frame.setResizable(false);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dim.getWidth() - frame.getWidth()) / 2);
        int y = 100;
        frame.setLocation(x, y);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSingleStudentButton;
    private javax.swing.JButton addStudentFromDatabaseButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton removeSingleStudentButton;
    private javax.swing.JButton removeStudentCompletSeason;
    private javax.swing.JButton viewStudentInformation;
    // End of variables declaration//GEN-END:variables
}
